{"version":3,"sources":["components/Display/Display.jsx","components/Key/Key.jsx","components/Keypad/Keypad.jsx","components/Calculator/Calculator.jsx","components/App/App.jsx","index.js"],"names":["Display","displayValue","className","Key","keyAction","keyType","keyValue","onClick","Keypad","callOperator","numbers","operators","setOperator","updateDisplay","numberKeys","map","number","key","operatorKeys","operator","Calculator","state","selectedOperator","storedValue","updateStoredValue","parseFloat","toString","setState","value","includes","substr","length","render","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.973407c6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Display.css';\n\nconst Display = ({ displayValue }) => <div className=\"display-container\"><p className=\"display-value\">{displayValue}</p></div>;\n\nDisplay.propTypes = { displayValue: PropTypes.string.isRequired };\n\nexport default Display;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Key.css';\n\nconst Key = ({ keyAction, keyType, keyValue }) => (\n    <div\n        className={`key-container ${keyType}`}\n        onClick={() => keyAction(keyValue)}\n    >\n        <p className=\"key-value\">{(keyValue === '/') ? <span>&#247;</span> : keyValue}</p>\n    </div>\n);\n\nKey.propTypes = {\n    keyAction: PropTypes.func.isRequired,\n    keyType: PropTypes.string.isRequired,\n    keyValue: PropTypes.string.isRequired,\n}\n\nexport default Key;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Keypad.css';\nimport Key from '../Key/Key';\n\nconst Keypad = ({ callOperator, numbers, operators, setOperator, updateDisplay }) =>\n{\n    const numberKeys = numbers.map(number => (\n        <Key\n            key={number}\n            keyAction={updateDisplay}\n            keyType=\"number-key\"\n            keyValue={number}\n        />)\n    );\n    const operatorKeys = operators.map(operator => (\n        <Key\n            key={operator}\n            keyAction={setOperator}\n            keyType=\"operator-key\"\n            keyValue={operator}\n        />)\n    );\n\n    return (\n        <div className=\"keypad-container\">\n            <div className=\"numbers-container\">\n                {numberKeys}\n            </div>\n            <div className=\"operators-container\">\n                {operatorKeys}\n            </div>\n            <div className=\"submit-container\">\n                <Key\n                    keyAction={callOperator}\n                    keyType=\"submit-key\"\n                    keyValue=\"=\"\n                />\n            </div>\n        </div>\n    );\n}\n\nKeypad.propTypes = {\n    callOperator: PropTypes.func.isRequired,\n    numbers: PropTypes.array.isRequired,\n    operators: PropTypes.array.isRequired,\n    setOperator: PropTypes.func.isRequired,\n    updateDisplay: PropTypes.func.isRequired,\n}\n\nexport default Keypad;","import React, { Component } from 'react';\nimport './Calculator.css';\nimport Display from \"../Display/Display\";\nimport Keypad from '../Keypad/Keypad';\n\nclass Calculator extends Component {\n    state = {\n        // value to be displayed in <Display />\n        displayValue: '0',\n        // values to be displayed in number <Keys />\n        numbers: ['9', '8', '7', '6', '5', '4', '3', '2', '1', '.', '0','ce'],\n        // values to be displayed in operator <Keys />\n        operators: ['/', 'x', '-', '+'],\n        // operator selected for math operation\n        selectedOperator: '',\n        // stored value to use for math operation\n        storedValue: '',\n    }\n\n    callOperator = () => {\n        let { displayValue, selectedOperator, storedValue } = this.state;\n        // temp variable for updating state storedValue\n        const updateStoredValue = displayValue;\n\n        // parse strings for operations\n        displayValue = parseFloat(displayValue);\n        storedValue = parseFloat(storedValue);\n\n        // performs selected operation\n        switch (selectedOperator) {\n            case '+':\n                displayValue = storedValue + displayValue;\n                break;\n            case '-':\n                displayValue = storedValue - displayValue;\n                break;\n            case 'x':\n                displayValue = storedValue * displayValue;\n                break;\n            case '/':\n                displayValue = storedValue / displayValue;\n                break;\n            default:\n                // set displayValue to zero if no case matches\n                displayValue = '0';\n        }\n\n        // converts displayValue to a string\n        displayValue = displayValue.toString();\n        // reset selectedOperator\n        selectedOperator = '';\n        // check for 'NaN' or 'Infinity', if true set displayValue to '0'\n        if (displayValue === 'NaN' || displayValue === 'Infinity') displayValue = '0';\n\n        this.setState({ displayValue, selectedOperator, storedValue: updateStoredValue });\n    }\n\n    setOperator = value => {\n        let { displayValue, selectedOperator, storedValue } = this.state;\n\n        // check if a value is already present for selectedOperator\n        if (selectedOperator === '') {\n            // update storedValue to the value of displayValue\n            storedValue = displayValue;\n            // reset the value of displayValue to '0'\n            displayValue = '0';\n            // update the value of selectedOperator to the given value\n            selectedOperator = value;\n        } else {\n            // if selectedOperator is not an empty string\n            // update the value of selectedOperator to the given value\n            selectedOperator = value;\n        }\n\n        this.setState({ displayValue, selectedOperator, storedValue });\n    }\n\n    updateDisplay = value => {\n        let { displayValue } = this.state;\n\n        // prevent multiple occurences of '.'\n        if (value === '.' && displayValue.includes('.')) value = '';\n\n        if (value === 'ce') {\n            // deletes last char in displayValue\n            displayValue = displayValue.substr(0, displayValue.length - 1);\n            // set displayValue to '0' if displayValue is empty string\n            if (displayValue === '') displayValue = '0';\n        } else {\n            // replace displayValue with value if displayValue equal to '0' and it does not include the dot\n            // else concatenate displayValue and value\n            displayValue === '0' && value!== '.' ? displayValue = value : displayValue += value;\n        }\n\n        this.setState({ displayValue });\n    }\n\n    render = () => {\n        // unpack the component state by using Object Destructuring\n        const { displayValue, numbers, operators } = this.state;\n        return (\n            <div className=\"calculator-container\">\n                <Display displayValue={displayValue}/>\n                <Keypad\n                    callOperator={this.callOperator}\n                    numbers={numbers}\n                    operators={operators}\n                    setOperator={this.setOperator}\n                    updateDisplay={this.updateDisplay}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from \"../Calculator/Calculator\";\n\nconst App = () => <div className=\"app-container\"><Calculator/></div>;\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}